{"version":3,"file":"list-model.service.js","sourceRoot":"","sources":["../src/demo-app/scheduler-app/list-model.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, Inject, Component} from '@angular/core'\nimport {DragDropModelTemplate} from './drag-drop-model-template';\nimport {data} from './mock-data'\n\n\n\ninterface csDndListTemplate {\n    header:string,\n    listUid:string,\n    listItems: [ csDndListItemTemplate  | string ]  \n}\ninterface csDndListItemTemplate{\n    viewText:string,\n    uid:string,\n    selected: boolean\n}\n\ninterface uidLocator{\n    listDx: number\n    itemDx: number \n}\n//@Component({\n//providers:[DragDropModelTemplate]\n//})\n@Injectable()\nexport class ListModelService {\n    private locatorsMap = []  \n    private injectionBlock = []\n    private selectedItemsCollection:[Object]\n    private lastSetCoordinates = []\n    private tmplBuilder// = new DragDropModelTemplate(data)\n    private model  //: csDndListTemplate[] //= this.tmplBuilder.conformModel()\n   constructor(@Inject(DragDropModelTemplate)tmplBuilder: DragDropModelTemplate ){\n       this.tmplBuilder = tmplBuilder\n    //   this.tmplBuilder.setModel(data)\n   //    this.model = this.tmplBuilder.conformModel()\n   }\n   getModelFromTemplate(){\n       let that = this\n      return  this.tmplBuilder.getRemoteDataForModel().map(d=>{\n            that.model = d\n            return d\n      })\n      //.subscribe(function(data){\n      // console.log('model service2')\n      // console.log(data)\n      // })\n   }\n    resetAllSelectionsToFalse(inverse?: string){\n    let selectionState = (inverse == 'inverse' ? true : false)\n    this.modelIterator(function(item){\n        item.selected = selectionState\n    })   \n    }\n  doSet(uid: string, prop: string, value: string | boolean, shiftKey: boolean){\n    let list = this.parseToList(uid)\n    let item = this.parseToListItem(uid)\n       if(this.model[list] != undefined){\n            if(this.model[list].listItems[item] != undefined){ \n                if(shiftKey && this.validateMultiSelection(list,item)){\n                    this.doMultiSelection(list, item, this.lastSetCoordinates[1], prop, value)\n                }\n                else{\n                 this.model[list].listItems[item][prop]= value\n                }\n                this.lastSetCoordinates = [list,item]\n             return value\n            }\n       }\n   }\n\n    private modelIterator(callback){\n        for(let i=0;i<this.model.length;i++){\n          for(let j=0;j<this.model[i].listItems.length;j++){\n\n            if(callback(this.model[i].listItems[j],i,j) == 'done'){\n                i =0\n                break\n            }\n          }\n        }\n    }\n    mapSelectedInModel(){\n\n       let locatorsMap = this.locatorsMap\n       let that = this\n       this.modelIterator(function(listItem, listIndex, itemIndex){\n         if(listItem.selected){\n             let dexes: uidLocator = { listDx: listIndex, itemDx: itemIndex }\n            that.locatorsMap.push(dexes)\n            let listItemClone = Object.assign({}, listItem)\n            that.injectionBlock.push(listItemClone)\n         }\n       })\n       return this.injectionBlock\n    }\n    flushSelectedLineup(){\n        this.injectionBlock = []\n        this.locatorsMap = []\n    }\n\n\n    doDropData(whereUid: string, emptyList: boolean){\n        console.log('diddrop')\n        console.log(whereUid)\n    let indexs =this.parseLocationFor( whereUid, emptyList)\n    let injectDx =indexs.itemDx  \n    let model = this.model\n    let that = this\n        for(let aRemovable  in this.injectionBlock){\n            let remove = this.injectionBlock[aRemovable]\n           this.modelIterator(function(item,listIndex,itemIndex){\n                if(item.uid == remove.uid && item.viewText == remove.viewText){\n                    that.model[listIndex].listItems.splice(itemIndex, 1)\n                    return 'done'\n                }\n           }) \n        }\n    let targetLen = model[indexs.listDx].listItems.length\n    let injector = [injectDx, 0].concat(this.injectionBlock)\n    Array.prototype.splice.apply(model[indexs.listDx].listItems, injector) \n\n        this.modelIterator(function(item, listIndex, itemIndex){\n            item.uid = `${listIndex}_${itemIndex}`\n        })\n    this.injectionBlock = []\n        return this.model\n    }\n    getModel(){\n        return this.model\n    }\n    parseToList(listUid){\n        let x = listUid.replace(/_[\\d]*/g, '')\n        return x\n    }\n    parseToListItem(listUid){\n        let x = listUid.replace(/[\\d]*_/g, '')\n        return x\n    }\n    private parseLocationFor(uid, emptyList: boolean): uidLocator {\n        let itemDx = emptyList == true ? 0 : parseInt(this.parseToListItem(uid))\n         let x  ={ \n         listDx: parseInt((this.parseToList(uid)).toString()),\n         itemDx: itemDx\n         }\n         console.log('x')\n         console.log(  x  )\n         return x\n    }\n//    parseListLocation(uid){\n//        return {\n//        listDx:\n//        }\n//    }\n    addListToModel(){\n        let list = this.tmplBuilder.getListTemplate()\n       list.header = 'new list' \n       list.listUid = ''+ this.model.length\n        this.appendList(list)\n        return this.model\n    }\n    private appendList(list: csDndListTemplate){\n        this.model.push(list)\n    }\n    refreshAllAssignments(){\n        this.resetAllSelectionsToFalse('inverse')\n        this.mapSelectedInModel()\n    this.doDropData('0_list', true)\n        this.resetAllSelectionsToFalse()\n        return this.model\n    }\n    validateMultiSelection(list, item){\n        let valid = false\n        if(this.lastSetCoordinates[0] == list){\n            valid = true\n        }\n        return valid\n    }\n    doMultiSelection(list,itemDx, previousDx, prop, value ){\n        console.log('orig prev' + previousDx)\n        console.log('orig item' + itemDx)\n        let lowest, highest \n        lowest = (previousDx < itemDx) ? previousDx : itemDx;\n        console.log('lowest immed = ' + lowest)\n        highest = (lowest == previousDx) ? itemDx : previousDx;\n        console.log('lowest = ' + lowest)\n        console.log('highest = '+highest)\n        console.log('prev = '+ previousDx)\n        console.log('itemdx = '+itemDx)\nlet that = this\n        this.modelIterator(function(listItem, listIndex, itemIndex){\n            if(list == listIndex && itemIndex >= lowest && itemIndex <= highest  ){\n              that.model[listIndex].listItems[itemIndex][prop] = value  \n            }\n        })\n    }\n// selectedItems(){\n//    let that = this\n//    this.modelIterator(function(listItem, listIndex, itemIndex){\n//      if(listItem.selected){\n//        that.selectedItemsCollection.push(listItem) \n//      }\n//      })\n//    return this.selectedItemsCollection\n//    }\n}\n"]}